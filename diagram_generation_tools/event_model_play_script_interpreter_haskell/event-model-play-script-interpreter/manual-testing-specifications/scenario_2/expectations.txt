<program> /manual_testing/scenario_1/input_file.txt

**Should list out everything, scenarios, models, entire script as is**

------------------------------------------------------------------------

<program> /manual_testing/scenario_1/input_file.txt --filters=Converter

**Should list out only Converter's perspective, only the data relevant, and only the systems Converter directly works with. Still should list out Scope and Settings**

Users:
  - Designers: People who design document templates

Systems:
  - Converter: System that converts OldDocumentDataFormat reference to NewDocumentDataFormat in DocumentTemplates
  - Reporting: System that renders DocumentTemplates into DocumentPdfs

DataTypes:
  - DocumentTemplate: Document Template that gets transformed to PDF
  - DocumentPdf: Output PDF of document to sell to customers
  - OldDocumentDataFormat: The old json scheme of the data format
  - NewDocumentDataFormat: The new json scheme of the data format

Setting: We are in the office where the underlying data format provided by Data Provider has changed, thereby changing how the DocumentTemplate needs to define its DocumentData. We want a system that can convert all existing DocumentTemplates' reference of OldDocumentDataFormat the NewDocumentDataFormat that the Data Provider is going to move to and also ensure that the DocumentPdf that get rendered is still correct.

Scope: Ecosystem

Script Start============================================================

Converter: 
  - (Designer convert awesomeJson:DocumentTemplate massEffect1:OldDocumentDataFormat massEffect2:NewDocumentDataFormat request recieved)
  - (apply massEffectRule:SubstitutionRule to awesomeJson:DocumentTemplate)
  - REQUEST Reporting TO render WITH awesomeJson:DocumentTemplate
  - (Reporting render response awesomePdf:DocumentPdf received)
  - RESPOND TO Designer convert REQUEST WITH "Success"

Script End============================================================

------------------------------------------------------------------------

<program> /manual_testing/scenario_1/input_file.txt --filters=Reporting

**Should list out only Reporting's perspective, only the data relevant, and only the systems Reporting directly works with. Still should list out Scope and Settings**

Users:

Systems:
  - Converter: System that converts OldDocumentDataFormat reference to NewDocumentDataFormat in DocumentTemplates
  - Reporting: System that renders DocumentTemplates into DocumentPdfs

DataTypes:
  - DocumentTemplate: Document Template that gets transformed to PDF
  - DocumentPdf: Output PDF of document to sell to customers

Setting: We are in the office where the underlying data format provided by Data Provider has changed, thereby changing how the DocumentTemplate needs to define its DocumentData. We want a system that can convert all existing DocumentTemplates' reference of OldDocumentDataFormat the NewDocumentDataFormat that the Data Provider is going to move to and also ensure that the DocumentPdf that get rendered is still correct.

Scope: Ecosystem

Script Start============================================================

Reporting: 
  - (Converter render awesomeJson:DocumentTemplate request received)
  - RESPOND TO Converter render REQUEST WITH awesomePdf:DocumentPdf

Script End============================================================

------------------------------------------------------------------------

<program> /manual_testing/scenario_1/input_file.txt --filters=Reporting,Designers

**Should list out things relating to Reporting's and Designers' perspectives, only the data relevant, and only the systems Reporting or Designers directly works with. Still should list out Scope and Settings**

Users:
  - Designers: People who design document templates

Systems:
  - Converter: System that converts OldDocumentDataFormat reference to NewDocumentDataFormat in DocumentTemplates
  - Reporting: System that renders DocumentTemplates into DocumentPdfs

DataTypes:
  - DocumentTemplate: Document Template that gets transformed to PDF
  - DocumentPdf: Output PDF of document to sell to customers
  - OldDocumentDataFormat: The old json scheme of the data format
  - NewDocumentDataFormat: The new json scheme of the data format

Setting: We are in the office where the underlying data format provided by Data Provider has changed, thereby changing how the DocumentTemplate needs to define its DocumentData. We want a system that can convert all existing DocumentTemplates' reference of OldDocumentDataFormat the NewDocumentDataFormat that the Data Provider is going to move to and also ensure that the DocumentPdf that get rendered is still correct.

Scope: Ecosystem

Scenario: A successful conversion

Script Start============================================================

Designers: 
  - REQUEST Converter TO convert WITH awesomeJson:DocumentTemplate massEffect1:OldDocumentDataFormat massEffect2:NewDocumentDataFormat
..
..
Reporting: 
  - (Converter render awesomeJson:DocumentTemplate request received)
  - RESPOND TO Converter render REQUEST WITH awesomePdf:DocumentPdf
..
..
Designer: 
  - (Converter convert response received)

Script End============================================================
