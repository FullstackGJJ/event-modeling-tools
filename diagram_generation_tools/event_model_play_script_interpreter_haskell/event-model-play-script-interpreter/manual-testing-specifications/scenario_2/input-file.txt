Users:
  - Designers: People who design document templates

Systems:
  - Converter: System that converts OldDocumentDataFormat reference to NewDocumentDataFormat in DocumentTemplates
  - Reporting: System that renders DocumentTemplates into DocumentPdfs

DataTypes:
  - DocumentTemplate: Document Template that gets transformed to PDF
  - DocumentPdf: Output PDF of document to sell to customers
  - OldDocumentDataFormat: The old json scheme of the data format
  - NewDocumentDataFormat: The new json scheme of the data format
  - SubstitutionRule: Rules for substitution of specific fields and values provided by the data provider

Setting: We are in the office where the underlying data format provided by Data Provider has changed, thereby changing how the DocumentTemplate needs to define its DocumentData. We want a system that can convert all existing DocumentTemplates' reference of OldDocumentDataFormat the NewDocumentDataFormat that the Data Provider is going to move to and also ensure that the DocumentPdf that get rendered is still correct.

Scope: Ecosystem

Scenario: A successful conversion

Script Start============================================================

Designers: 
  - REQUEST Converter TO convert WITH awesomeJson:DocumentTemplate massEffect1:OldDocumentDataFormat massEffect2:NewDocumentDataFormat
Converter: 
  - (Designer convert WITH awesomeJson:DocumentTemplate massEffect1:OldDocumentDataFormat massEffect2:NewDocumentDataFormat request recieved)
  - (apply massEffectRule:SubstitutionRule to awesomeJson:DocumentTemplate)
  - REQUEST Reporting TO render WITH awesomeJson:DocumentTemplate
Reporting: 
  - (Converter render awesomeJson:DocumentTemplate request received)
  - RESPOND TO Converter render REQUEST WITH awesomePdf:DocumentPdf
Converter: 
  - (Reporting render response awesomePdf:DocumentPdf received)
  - RESPOND TO Designer convert REQUEST WITH "Success"
Designer: 
  - (Converter convert response received)

Script End============================================================
