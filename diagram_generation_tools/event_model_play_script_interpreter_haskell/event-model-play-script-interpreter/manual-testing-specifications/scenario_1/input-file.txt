Users:
  - Designers: People who design document templates

Systems:
  - Reporting: System that renders DocumentTemplates into DocumentPdfs
  - Converter: System that converts OldDocumentDataFormat reference to NewDocumentDataFormat in DocumentTemplates
  - Repository: System that stores document DocumentTemplates
  - DataProvider: System that provides data relevant for DocumentTemplates
  - Validator: System that validates if DocumentTemplates produce the the same pdf

DataTypes:
  - DocumentTemplate: Document Template that gets transformed to PDF
  - DocumentPdf: Output PDF of document to sell to customers
  - OldDocumentDataFormat: The old json scheme of the data format
  - NewDocumentDataFormat: The new json scheme of the data format
  - SubstitutionRule: Rules for substitution of specific fields and values provided by the data provider

Setting: We are in the office where the underlying data format provided by Data Provider has changed, thereby changing how the DocumentTemplate needs to define its DocumentData. We want a system that can convert all existing DocumentTemplates' reference of OldDocumentDataFormat the NewDocumentDataFormat that the Data Provider is going to move to and also ensure that the DocumentPdf that get rendered is still correct.

Scope: Ecosystem

Scenario: A successful conversion

Script Start============================================================

Designer: 
  - REQUEST Converter TO convert WITH awesomeJson:DocumentTemplate massEffect1:OldDocumentDataFormat massEffect2:NewDocumentDataFormat
Converter: 
  - (Designer convert request recieved)
  - REQUEST DataProvider TO getSubstitutionRule WITH massEffect1:OldDocumentDataFormat massEffect2:NewDocumentDataFormat
DataProvider: 
  - (Converter getSubstitutionRule request received)
  - RESPOND TO Converter getSubstitutionRule REQUEST WITH massEffectRule:SubstitutionRule
Converter: 
  - (DataProvider getSubstitutionRule response massEffectRule:SubstitutionRule received)
  - (apply massEffectRule:SubstitutionRule to awesomeJson:DocumentTemplate)
  - REQUEST Reporting TO render WITH awesomeJson:DocumentTemplate
Reporting: 
  - (Converter render request received)
  - RESPOND TO Converter render REQUEST WITH awesomePdf:DocumentPdf
Converter: 
  - (Reporting render response awesomePdf:DocumentPdf received)
  - REQUEST Validator TO compare WITH awesomePdf:DocumentPdf awesomePdfReference:DocumentPdf
Validator: 
  - (Converter compare request received)
  - RESPOND TO Converter compare REQUEST WITH "Success"
Converter: 
  - (Validator compare response "Success" received)
  - REQUEST Repository TO store WITH awesomeJson:DocumentTemplate
Repository: 
  - (Converter store request received)
  - RESPOND TO Converter store REQUEST WITH "Success"
Converter: 
  - (Repository store response "Success" received)
  - RESPOND TO Designer convert REQUEST WITH "Success"
Designer: 
  - (Converter convert response received)

Script End============================================================
